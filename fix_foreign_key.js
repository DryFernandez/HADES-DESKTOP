const mysql = require('mysql2/promise');
require('dotenv').config();

async function fixForeignKey() {
    let connection;

    try {
        console.log('üîß Conectando a la base de datos...');

        // Configuraci√≥n de conexi√≥n
        const dbConfig = {
            host: process.env.DB_HOST || 'localhost',
            user: process.env.DB_USER || 'root',
            password: process.env.DB_PASSWORD || '',
            database: 'HADES',
            port: parseInt(process.env.DB_PORT) || 3306
        };

        connection = await mysql.createConnection(dbConfig);
        console.log('‚úÖ Conexi√≥n exitosa');

        // Verificar tablas existentes
        console.log('üìã Verificando tablas existentes...');
        const [tables] = await connection.execute("SHOW TABLES");
        console.log('Tablas encontradas:', tables.map(t => Object.values(t)[0]));

        // Verificar restricciones de clave for√°nea
        console.log('üîç Verificando restricciones de clave for√°nea...');
        const [constraints] = await connection.execute(`
            SELECT
                TABLE_NAME,
                COLUMN_NAME,
                CONSTRAINT_NAME,
                REFERENCED_TABLE_NAME,
                REFERENCED_COLUMN_NAME
            FROM
                INFORMATION_SCHEMA.KEY_COLUMN_USAGE
            WHERE
                REFERENCED_TABLE_SCHEMA = 'HADES'
                AND TABLE_NAME = 'productos'
        `);

        console.log('Restricciones encontradas:', constraints);

        // Desactivar verificaci√≥n de claves for√°neas temporalmente
        console.log('üîÑ Desactivando verificaci√≥n de claves for√°neas...');
        await connection.execute('SET FOREIGN_KEY_CHECKS = 0');

        // Eliminar la restricci√≥n problem√°tica
        console.log('üóëÔ∏è Eliminando restricci√≥n problem√°tica...');
        try {
            await connection.execute('ALTER TABLE productos DROP FOREIGN KEY fk_producto_inventario');
            console.log('‚úÖ Restricci√≥n eliminada');
        } catch (error) {
            console.log('‚ö†Ô∏è La restricci√≥n no exist√≠a o ya fue eliminada:', error.message);
        }

        // Reactivar verificaci√≥n de claves for√°neas
        console.log('üîÑ Reactivando verificaci√≥n de claves for√°neas...');
        await connection.execute('SET FOREIGN_KEY_CHECKS = 1');

        // Crear la restricci√≥n correcta
        console.log('üîó Creando restricci√≥n correcta...');
        await connection.execute(`
            ALTER TABLE productos
            ADD CONSTRAINT fk_producto_inventario
            FOREIGN KEY (inventario_id)
            REFERENCES inventario(id)
            ON DELETE SET NULL
            ON UPDATE CASCADE
        `);

        console.log('‚úÖ Restricci√≥n creada correctamente');

        // Verificar que se cre√≥ correctamente
        const [newConstraints] = await connection.execute(`
            SELECT
                TABLE_NAME,
                COLUMN_NAME,
                CONSTRAINT_NAME,
                REFERENCED_TABLE_NAME,
                REFERENCED_COLUMN_NAME
            FROM
                INFORMATION_SCHEMA.KEY_COLUMN_USAGE
            WHERE
                REFERENCED_TABLE_SCHEMA = 'HADES'
                AND TABLE_NAME = 'productos'
                AND CONSTRAINT_NAME = 'fk_producto_inventario'
        `);

        console.log('‚úÖ Nueva restricci√≥n verificada:', newConstraints);

        console.log('üéâ ¬°Foreign key constraint corregida exitosamente!');

    } catch (error) {
        console.error('‚ùå Error corrigiendo foreign key:', error);
        throw error;
    } finally {
        if (connection) {
            await connection.end();
            console.log('üîå Conexi√≥n cerrada');
        }
    }
}

// Ejecutar la funci√≥n
fixForeignKey()
    .then(() => {
        console.log('‚úÖ Script completado exitosamente');
        process.exit(0);
    })
    .catch((error) => {
        console.error('‚ùå Error en el script:', error);
        process.exit(1);
    });